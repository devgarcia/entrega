
  counter == 30
  interval = 5 # Check every 5 seconds
  interval_timer = 1 # must start at 1
  now = Time.now
  while Time.now - now < counter
      if interval_timer % interval == 0 #Every 5 attempts the activity will process
          if condition
              stuff
          end
      end
      process_timer = process_timer + 1
  end





# ------------------------ || --------------------------------
#Currently this code works, sets the radius at 500 0r 1000 accordingly
#after_save :change_radius, on: [:create, :update]
#
#
# def change_radius
#  if order.status == 'posted'
#    sleep 5
#    update_column(:radius, 1000)
#    puts ""
#    puts " New Radius is #{radius} "
#    puts ""
#  elsif order.status == 'draft'
#    update_column(:radius, 500)
#    puts ""
#    puts " New Radius is #{radius} "
#    puts ""
#  end
# end


 # ------------------------ || -------------------------------- 


#def change_radius
#    count = 1
#    # In rality the radius below will be brought from the order with a value of 500 
#    initial_radius = order.radius
#    while order.status == 'posted' && count < 2 # if after 20 secs order hasn't been 
#                              #taken bring it back to status Draft and its radius back to 500 
#      order.radius = 500
#      n = 1        
#      while order.status == 'posted' && count < 10 # Check for 10 secs otherwise extend radius
#        sleep 1     
#        n += 1
#      end
#      if order.status == 'posted'
#        count += 1
#        order.radius *= count
#        update_column(:radius, radius)
#      elsif order.status == 'taken'
#        order.radius *= count
#       # order.radius.update
#      end
#      #order.radius =500 This was commented as it didn't affect
#    end
#    if order.status == 'taken'
#      # Print an alert??
#    else
#      order.radius = initial_radius
#      order.status = 'draft'
#    end
#end








 # ------------------------ || -------------------------------- 
# ALL THIS CODE IS FOR TESTING ONLY AND IS BEING TAKEN FROM ABOVE

#def change_radius
#   count = 1
#   # In rality the radius below will be brought from the order with a value of 500 
#   initial_radius = 500 
#   #order.radius
#   while order.status == 'posted' && count < 3 # if after 20 secs order hasn't been 
#                             #taken bring it back to status Draft and its radius back to 500 
#     order.radius = 500
#     n = 1        
#     while order.status == 'posted' && n < 10 # Check for 10 secs otherwise extend radius
#       sleep 1     
#       n += 1
#     end
#
#     if order.status == 'posted'
#       count += 1
#       order.radius *= count
#       #update_column(:radius, radius)
#
#
#     elsif order.status == 'taken'
#       order.radius *= count
#      # order.radius.update
#     end
#     #order.radius =500 This was commented as it didn't affect
#   end
#
#
#   if order.status == 'taken'
#     # Print an alert??
#   else
#     order.radius = initial_radius
#     order.status = 'draft'
#   end
#end
#

  # ----------------------------------- ATTENTION ANTONIO !!!!!  The Code encapsulated below works. AWAITING FOR MARIO TO FINISH HIS PART  -------
  
#  def order_posted 
#    order.status == 'posted'     
#  end
#
#  #validates :weight, numericality: { :greater_than_or_equal_to => 0.01 }
#
#  validates_associated :locations, if: :order_posted 
#
#
#  with_options if: :order_posted do |order|
#    order.validates :description, presence: true 
#    order.validates :weight, numericality: { :greater_than_or_equal_to => 1 }
#    order.validates :length, numericality: { :greater_than_or_equal_to => 1 }
#    order.validates :width, numericality: { :greater_than_or_equal_to => 1 } 
#    order.validates :heigth, numericality: { :greater_than_or_equal_to => 1 }
#    #validates_associated :address
#    #order.validates :locations, presence: true
#    order.validates :status, presence: true 
#    order.validates :cost, numericality: { :greater_than_or_equal_to => 1 }  
#    #order.validates :radius, presence: true, numericality: true 
#    order.validates :sender_id, presence: true  
#  end
# ----------------------------------- || -------------------------------------------------------------